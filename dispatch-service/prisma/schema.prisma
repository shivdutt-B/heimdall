generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  Server    Server[]
  Alert     Alert[]

  @@map("users")
}

model Server {
  id                  String        @id @default(uuid())
  userId              String        @map("user_id")
  url                 String
  name                String        @unique
  isActive            Boolean       @default(true) @map("is_active")
  pingInterval        Int           @default(300) @map("ping_interval") // in seconds
  createdAt           DateTime      @default(now()) @map("created_at")
  updatedAt           DateTime      @updatedAt @map("updated_at")
  lastPingedAt        DateTime?     @map("last_pinged_at")
  nextPingAt          DateTime      @default(now()) @map("next_ping_at")
  lastImmediateAlertAt DateTime?     @map("last_immediate_alert_at")
  user                User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  pingHistory         PingHistory[]
  failureThreshold    Int           @default(3) @map("failure_threshold") // min 1, max 10
  consecutiveFailures Int           @default(0) @map("consecutive_failures")
  alert               Alert?

  @@map("servers")
}

model PingHistory {
  id           String   @id @default(uuid())
  serverId     String   @map("server_id")
  status       Boolean // success or failure
  responseTime Int?     @map("response_time") // in milliseconds
  statusCode   Int?     @map("status_code")
  timestamp    DateTime @default(now())
  heapUsage    Float?   @map("heap_usage") // heap usage in MB
  totalHeap    Float?   @map("total_heap")
  rssMemory    Float?   @map("rss_memory") // resident set size in MB
  totalRss     Float?   @map("total_rss")
  server       Server   @relation(fields: [serverId], references: [id], onDelete: Cascade)

  @@map("ping_history")
}

model VerificationCode {
  id        String   @id @default(uuid())
  email     String
  code      String
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("verification_codes")
}

model Alert {
  id          String   @id @default(uuid())
  serverId    String   @unique @map("server_id")
  userId      String   @map("user_id")
  lastAlertAt DateTime @map("last_alert_at")
  nextAlertAt DateTime @map("next_alert_at")
  createdAt   DateTime @default(now()) @map("created_at")

  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("alerts")
}
